from askjennie import JSONHelper

def identify_max_len(data):
    len_key = len(str(data))
    if len_key > 1000:
        max_len = 5000
    elif len_key > 200:
        max_len = 1000
    else:
        max_len = 200
    return max_len

def get_column_settings(key, data, prev_config=None):
    config = {}
    len_key = identify_max_len(data)
    if prev_config != None:
        if prev_config["field_type"] == "varchar":
            if prev_config["max_len"] < len_key:
                prev_config["max_len"] = identify_max_len(data)
                return prev_config
            else:
                return prev_config
        else:
            try:
                val_int = int(data)
                return prev_config
            except Exception as e:
                config["field_name"] = key
                config["field_type"] = "varchar"
                config["max_len"] = len_key
                return config

    else:
        try:
            val_int = int(data)
            if "." in str(data):
                config["field_name"] = key
                config["field_type"] = "float"
            else:
                config["field_name"] = key
                config["field_type"] = "int"
        except:
            config["field_name"] = key
            config["field_type"] = "varchar"
            config["max_len"] = len_key

        return config

def create_table_configration(filepath, outfile=None):
    jhelper = JSONHelper()

    data = jhelper.read_json(filepath)
    columns_identified = {

    }
    columns = []
    for school in data:
        for key in school:
            value = school[key]
            if key not in columns_identified:
                columns_identified[key] = get_column_settings(key, value)
            else:
                columns_identified[key] = get_column_settings(key, value, columns_identified[key])

    for column in columns_identified:
        columns.append(
            columns_identified[column]
        )

    if outfile != None:
        jhelper.write_json(outfile, columns)
    return columns
