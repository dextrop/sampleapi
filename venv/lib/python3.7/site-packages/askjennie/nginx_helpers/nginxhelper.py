import platform
from os import path, system, walk

nginx_conf_path = "/usr/local/etc/nginx/conf.d"

nginx_localhost_conf = '''server {
        listen NGINX_PORT;
        root NGINX_ROOT;
        index index.php index.html index.htm index.nginx-debian.html;
        server_name SERVER_NAME;

        location / {
                try_files $uri $uri/ =404;
        }

        location ~ /\.ht {
                deny all;
        }
}'''

class NginxHelper():
    def __init__(self):
        """
        NginxHelper can be used to maintain nginx webserver config.

        The Module provide below features:
        - Generate Nginx configuration
        - List all nginx configuration
        - Delete nginx configuration

        # Init Class
        nginx_helper = NginxHelper()
        """

    def generate_nginx_conf(self, port=8080, root="", server_name="localhost"):
        """
        Generate Nginx Config.
        The process generates a config file for nginx server and shift it to nginx directory.
        User can further reload nginx and make the configuration live using.
        sudo nginx -s reload

        # generate
        nginx_helper.generate_nginx_conf(port=8080, root="project/path", server_name="server_name")

        :param port: web hosting port. eg: http://locolhost:4200 , here 4200 is port.
        Port can range between any number 0 60000,
        best practice is to use port between 7000 - 8000
        :param root: path/to/html_files.
        :param server_name: Name of the server
        :return: Generated NGINX config file.
        """
        if root == "":
            root = path.realpath(__file__)
        conf = nginx_localhost_conf
        generated_cnf = conf.replace("NGINX_PORT", str(port)) \
            .replace("NGINX_ROOT", root) \
            .replace("SERVER_NAME", server_name)

        open(server_name + ".conf", "w").write(generated_cnf)
        if (platform.system() == "Darwin"):
            system('mkdir /usr/local/etc/nginx/conf.d > /dev/null 2>&1')
            system('mv {0} /usr/local/etc/nginx/conf.d/{0}'.format(server_name + ".conf"))
        else:
            raise ValueError("Nginx configration is not supported for {} platform".format(str(platform.system())))

        print("Nginx configuration created.\nUse command `sudo nginx -s reload` to reload nginx server.\n"
              "\nReloading nginx server will make the configuration live.".format(server_name + ".sh"))
        return generated_cnf


    def list_all_nginx_conf(self):
        """
        Returns all nginx configurations created

        # get all configrations
        config = nginx_helper.list_all_nginx_conf()

        # output config = ["demoserver", "testserver" ....]
        :return: List of configurations generated
        """
        _, _, filenames = next(walk(nginx_conf_path))
        return filenames

    def delete_nginx_config(self, config_name):
        """
        Delete a configuration.

        # delete config
        print (nginx_helper.delete_nginx_config(config_name=demoserver)

        # prints Deleted /usr/local/etc/nginx/conf.d/demoserver.conf
        :param config_name: configuration name eg demoserver
        :return: Deleted /usr/local/etc/nginx/conf.d/demoserver.conf
        """
        system("rm -rf /usr/local/etc/nginx/conf.d/{}.conf" + config_name)
        return "Deleted /usr/local/etc/nginx/conf.d/{}.conf".format(config_name)

