
DJANGO_USER_SERIALIZER = '''from rest_framework import serializers
from src.helpers import password_hashing
from django.core.exceptions import ValidationError
from src.models import MODEL_NAME, MODEL_NAMEToken
FORIEGN_KEY_MODEL
model_fields = MODEL_FIELD

class MODEL_NAMEBaseSerializer(serializers.ModelSerializer):
    FORIEGN_KEY_DECLARATION
    class Meta:
        model = MODEL_NAME
        exclude = ('salt', 'password')

class MODEL_NAMESerializer():
    def validate_email_password(self, email, password):        
        obj = self.check_if_user_exits(email=email)
        if obj == None:
            raise ValidationError("Email Does not exits")
        
        password_req, _ = password_hashing(password, obj.salt)
        if password_req != obj.password:
            raise ValidationError("Invalid Password")
        
        return True
    
    def check_if_user_exits(self, email):
        objects = MODEL_NAME.objects.filter(email=email)
        if (objects.count() < 1):
            return None
        return objects[0]
            
    def generate_session(self, object):        
        token, created = MODEL_NAMEToken.objects.get_or_create(user_id=object)
        user_info = MODEL_NAMEBaseSerializer(object, many=False).data
        user_info["token"] = token.access_token
        return user_info
    
    def modify(self, data):
        # Modify an object based on ID.
        if "_id" not in data:
            raise ValidationError("Missing Object ID")
        obj = self.get(id=data["_id"])
        if obj == None:
            raise ValidationError("Object does not exits check if id is correct")
        for key in model_fields:
            if key != "_id" and key in data:
                setattr(obj, key, data[key])

        obj.save()
        obj = self.get(id=obj._id)
        return MODEL_NAMEBaseSerializer(obj, many=False).data

    def delete(self, data):
        # Delete an object based on ID.
        if "_id" not in data:
            raise ValidationError("Missing Object ID")
        MODEL_NAME.objects.filter(_id=data["_id"]).delete()
        return "Object Deleted Successfully"
'''

DJANGO_NORMAL_SERIALIZER = '''from rest_framework import serializers
from django.core.exceptions import ValidationError
from src.models import MODEL_NAME
FORIEGN_KEY_MODEL
model_fields = MODEL_FIELD

class MODEL_NAMEBaseSerializer(serializers.ModelSerializer):
    FORIEGN_KEY_DECLARATION
    class Meta:
        model = MODEL_NAME
        fields = '__all__'

class MODEL_NAMESerializer():    
    def get(self, id=None, order_by_created=False, page_no=1, item_per_page=10):     
        # Returns user object from database based on filter configuration.
        if id != None:
            objects = MODEL_NAME.objects.filter(_id=id)
            if objects.count() < 1:
                return None
            return objects[0]
        
        start = ( page_no - 1 ) * item_per_page
        end = start + item_per_page
        
        if order_by_created:
            return MODEL_NAME.objects.all().order_by("-_created")[start:end]
        else:
            return MODEL_NAME.objects.all().order_by("-_updated")

    def add(self, data):
        # Validate object and add it to table.
        for field in model_fields:
            if field not in data:
                raise ValidationError("Missing key '{}'".format(field))
        user_obj = MODEL_NAME.objects.create(**data)

        return MODEL_NAMEBaseSerializer(user_obj, many=False).data

    def modify(self, data):
        # Modify an object based on ID.
        if "_id" not in data:
            raise ValidationError("Missing Object ID")
        obj = self.get(id=data["_id"])
        if obj == None:
            raise ValidationError("Object does not exits check if id is correct")
        for key in model_fields:
            if key != "_id" and key in data:
                setattr(obj, key, data[key])

        obj.save()
        obj = self.get(id=obj._id)
        return MODEL_NAMEBaseSerializer(obj, many=False).data

    def delete(self, data):
        # Delete an object based on ID.
        if "_id" not in data:
            raise ValidationError("Missing Object ID")
        MODEL_NAME.objects.filter(_id=data["_id"]).delete()
        return "Object Deleted Successfully"
'''