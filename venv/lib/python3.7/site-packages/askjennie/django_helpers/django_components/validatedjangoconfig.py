from askjennie.helpers import *
from askjennie.django_helpers.django_components.django_fields import FIELD_FOREIGN_KEY, FIELD_PASSWORD, FIELD_EMAIL

class ValidateDjangoConfigration():
    def __init__(self, project_name, project_path):
        self.project_name = project_name
        self.project_path = project_path
        self.project_full_path = self.project_path + "/" + self.project_name
        if self.project_path[-1] == "/":
            self.project_full_path = self.project_path + self.project_name

        if self.project_full_path[:-1] == "/":
            self.project_full_path = self.project_full_path[:-1]

    def do_project_exits(self):
        if os.path.exists(self.project_full_path):
            return True
        return False

    def validate_backend_structure(self):
        if not os.path.isfile(self.project_full_path + "/src/models/__init__.py"):
            raise ValueError("Project {} seems to have improper models package. "
                             "Make sure your models package is proper".format(self.project_name))
        if not os.path.isfile(self.project_full_path + "/src/views/__init__.py"):
            raise ValueError("Project {} seems to have improper views package. "
                             "Make sure your views package is proper".format(self.project_name))
        if not os.path.isfile(self.project_full_path + "/src/controllers/__init__.py"):
            raise ValueError("Project {} seems to have improper controllers package. "
                             "Make sure your controllers package is proper".format(self.project_name))
        if not os.path.isfile(self.project_full_path + "/src/serializers/__init__.py"):
            raise ValueError("Project {} seems to have improper serializers package. "
                             "Make sure your serializers package is proper".format(self.project_name))
        return True

    def do_model_exits(self, model_name):
        _filepath = model_name.replace(" ", "").replace("-", "").replace("_", "").lower() + ".py"
        self.model_filepath = "src/models/" + _filepath
        if os.path.isfile(self.project_full_path + "/src/models/" + _filepath):
            return True
        return False

    def do_serializer_exits(self, model_name):
        _filepath = model_name.replace(" ", "").replace("-", "").replace("_", "").lower() + "serializer" + ".py"
        self.serializer_filepath = "src/serializers/" + _filepath
        if os.path.isfile(self.project_full_path + "/src/serializers/" + _filepath):
            return True
        return False

    def do_apiview_exits(self, api_name):
        _filepath = api_name.replace(" ", "").replace("-", "").replace("_", "").lower() + "view" + ".py"
        self.apiview_filepath = "src/views/" + _filepath
        if os.path.isfile(self.project_full_path + "/src/views/" + _filepath):
            return True
        return False

    def do_controller_exits(self, api_name):
        _filepath = api_name.replace(" ", "").replace("-", "").replace("_", "").lower() + "controller" + ".py"
        self.controller_filepath = "src/controllers/" + _filepath
        if os.path.isfile(self.project_full_path + "/src/controllers/" + _filepath):
            return True
        return False

    def validate_model_conf(self, model_configration):
        self.validate_backend_structure()
        validate_dict(model_configration, ["table_name", "columns"], request_name="Table Configration")
        model_name = model_configration["table_name"].replace(" ", "").replace("-", "").replace("_", "")
        fields = model_configration["columns"]
        for field in fields:
            validate_dict(field, ["column_type", "column_name"], request_name="Field Configration")
            if "field_type" == FIELD_FOREIGN_KEY:
                if "ref" not in field:
                    raise ValueError("Foreign Key Ref Table Missing")

        if self.do_model_exits(model_name=model_configration["table_name"]):
            raise ValueError("Model Already Exits for Model Configration : " + model_configration["table_name"])

        if self.do_serializer_exits(model_name=model_configration["table_name"]):
            raise ValueError("Serializer for the model Already Exits for Model Configration: " + model_configration["table_name"])


        return model_name, self.model_filepath, self.serializer_filepath

    def validate_api_conf(self, api_configration):
        self.validate_backend_structure()
        validate_dict(api_configration, ["api_endpoint", "api_type", "api_table", "api_name"], request_name="API Configration")
        api_name = api_configration["api_name"].replace(" ", "").replace("-", "").replace("_", "")
        if self.do_apiview_exits(api_name=api_configration["api_name"]):
            raise ValueError("API View Already Exits for API Configration : " + api_configration["api_name"])
        if self.do_controller_exits(api_name=api_configration["api_name"]):
            raise ValueError("API View Controller Already Exits for API Configration : " + api_configration["api_name"])

        return api_name, self.apiview_filepath, self.controller_filepath

    def validate_backend_config(self, backend_configuration):
        validate_dict(dictObj=backend_configuration, keys=["tables", "apis"])
        available_models = []

        for table in backend_configuration["tables"]:
            validate_dict(table, ["table_name", "columns"], request_name="Table Configration")
            fields = table["columns"]
            for field in fields:
                validate_dict(field, ["column_type", "column_name"], request_name="Field Configration")
                if "field_type" == FIELD_FOREIGN_KEY:
                    if "ref" not in field:
                        raise ValueError("Foreign Key Ref Table Missing")

            if table["table_name"] in available_models:
                raise ValueError("Duplicate Table found. Table {} is already declared".format(table["name"]))
            else:
                available_models.append(table["table_name"])


        for api in backend_configuration["apis"]:
            validate_dict(api, ["api_endpoint", "api_type", "api_table", "api_name"],
                          request_name="API Configration")
            if api["api_table"] not in available_models:
                raise ValueError("Model name {} is not found in configration. "
                                 "Check configration provided".format(api["model_name"]))

        if self.do_project_exits():
            raise ValueError("Project Already Exits")

        return True