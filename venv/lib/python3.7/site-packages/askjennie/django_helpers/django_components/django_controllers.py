DJANGO_LOGINAPI_CONTROLLER = '''from src.helpers import *
from src.serializers import MODEL_NAMESerializer
from src.models import MODEL_NAME

model_fields = ["email", "password"]

class API_NAMEController():
    def __init__(self):
        self.serializer = MODEL_NAMESerializer()

    def login(self, request_data):
        """
        :param request_data: {"email": "", "password"}
        :return: {"user_info": "token": ""}
        """
        validate_request(model_fields, request_data)

        user = self.serializer.check_if_user_exits(
            email= request_data["email"]
        )

        self.serializer.validate_email_password(
            email=request_data["email"], password=request_data["password"]
        )

        return MODEL_NAMESerializer().generate_session(user)
'''

DJANGO_SIGNUPAPI_CONTROLLER = '''from src.helpers import *
from src.serializers import MODEL_NAMESerializer
from src.models import MODEL_NAME

MODEL_FIELDS_DECLARATION
class API_NAMEController():
    def __init__(self):
        self.serializer = MODEL_NAMESerializer()

    def signup(self, request_data):
        """
        Validate API request
        check if user already exits in db
        hash password and create salt
        add object to db and return session
        """
        validate_request(model_fields, request_data)
        user = self.serializer.check_if_user_exits(
            email= request_data["email"]
        )
        
        if user != None:
            raise ValidationError("User already exits, Try login in")
        request_data["password"], request_data["salt"] = password_hashing(request_data["password"])
        created = MODEL_NAME.objects.create(**request_data)
        return MODEL_NAMESerializer().generate_session(created)
'''

DJANGO_NORMAL_API_CONTROLLER = '''from src.helpers import *
from src.serializers import MODEL_NAMESerializer
from src.models import MODEL_NAME

MODEL_FIELDS_DECLARATION
class API_NAMEController():
    def get(self, request_data):
        """
        :param request_data: Validate Request and Add User to DB and Generate Session 
        :return: {"user_info": "token": ""}
        """
        if "id" in request_data:        
            return MODEL_NAMESerializer().get(id=request_data["id"])
        else:
            page_no = 1
            item_per_page = 1
            if "page_no" in request_data:
                try:
                    page_no = int(request_data["page_name"])
                except Exception as e:
                    page_no = 0
            if "item_per_page" in request_data:
                try:
                    item_per_page = int(request_data["item_per_page"])
                except Exception as e:
                    item_per_page = 0
            return MODEL_NAMESerializer().get()
            
    def add(self, request_data):
        """
        :param request_data: Validate Request and Add User to DB and Generate Session 
        :return: {"user_info": "token": ""}
        """
        return MODEL_NAMESerializer().add(request_data) 
            
    def modify(self, request_data):
        """
        :param request_data: Validate Request and Add User to DB and Generate Session 
        :return: {"user_info": "token": ""}
        """
        return MODEL_NAMESerializer().modify(request_data)     
        
    def delete(self, request_data):
        """
        :param request_data: Validate Request and Add User to DB and Generate Session 
        :return: {"user_info": "token": ""}
        """
        return MODEL_NAMESerializer().delete(request_data)                             
'''