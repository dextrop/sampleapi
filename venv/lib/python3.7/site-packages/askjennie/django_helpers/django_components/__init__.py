import json
from datetime import datetime
from askjennie.django_helpers.django_components.django_views import *
from askjennie.django_helpers.django_components.django_fields import *
from askjennie.django_helpers.django_components.django_libraries import *
from askjennie.django_helpers.django_components.django_helper_file import *
from askjennie.django_helpers.django_components.django_model_class import *
from askjennie.django_helpers.django_components.django_token_class import *
from askjennie.django_helpers.django_components.django_project_urls import *
from askjennie.django_helpers.django_components.django_project_settings import *
from askjennie.django_helpers.django_components.django_project_installation import *
from askjennie.django_helpers.django_components.django_serializers import *
from askjennie.django_helpers.django_components.django_controllers import *
from askjennie.django_helpers.django_components.django_api_docs import *
from askjennie.django_helpers.django_components.validatedjangoconfig import *

def create_django_project(project_location, project_name):
    """
    create django project at location project_location + "/" + project_name
    :param project_location: Location for project
    :param project_name: Project Name
    """
    project_path = project_location + project_name

    # Create django project
    change_working_dir(project_location)
    os.system("django-admin startproject {}".format(project_name))
    change_working_dir(project_path)
    os.system("mv {}/urls.py urls.py".format(project_name))

    # Create django folder and packages
    folders_to_create = ["src", "src/lib", "src/serializers", "src/views", "src/controllers", "src/models", "logs"]
    create_python_packages(folders_to_create)

    # Writing libraries files, settings files, executable script and other helper functions.
    settings_file_path = "{}/settings.py".format(project_name)
    extra_files = {
            "src/lib/customexceptionhandler.py": CUSTOM_EXCEPTION_HANDLER,
            "src/lib/customresponse.py": CUSTOM_RESPONSE,
            "src/lib/loggingmixin.py": LOGGING_HANDLER,
            "src/lib/authentication.py": DJANGO_BASE_AUTH_CLASS,
            "src/lib/permissions.py": DJANGO_PERMISSION_CLASS,
            settings_file_path : DJANGO_PROJECT_SETTINGS,
            "src/views/statusview.py": SAMPLE_VIEW,
            "src/views/__init__.py": INIT_VIEW_BASIC_IMPORT,
            "src/helpers.py": DJANGO_HELPER_FILE,
            "urls.py": URLS_FILE,
            "requirements.txt": REQUIREMENTS_TXT_FILE,
    }


    script_files = {
        "install.sh": INSTALL_SCRIPT,
        "install-python3.sh": INSTALL_SCRIPT_PYTHON_3,
        "migrate.sh": MIGRATE_SCRIPT
    }

    write_files(extra_files)
    write_executable_script(script_files)

    # write readme
    project_readme = BASE_PROJECT_DOCS.replace("PROJECT_NAME", project_name)
    open("README.md", "w").write(project_readme)

def create_django_model(model_name, model_file_path, serializer_file_path, fields):

    table_name = model_name.lower()

    model_text = DJANGO_BASE_MODEL

    models_field_imports = ""
    models_field_dec_txt = ""
    do_contain_email = False
    do_contain_password = False

    serializer_field_imports = ""
    serializer_field_declaration = ""
    all_fields = []

    for field_conf in fields:

        field_txt, field_import, field_type, field_name = get_django_field(field_conf)

        models_field_dec_txt += field_txt
        if field_import != "":
            models_field_imports += field_import

        all_fields.append(field_name)
        if field_type == FIELD_EMAIL:
            do_contain_email = True
        elif field_type == FIELD_PASSWORD:
            do_contain_password = True
        elif field_type == FIELD_FOREIGN_KEY:
            ref = field_conf["ref"]
            serializer_field_imports += "from src.serializers import {}BaseSerializer\n".format(ref)
            serializer_field_declaration += "{} = {}BaseSerializer()\n".format(field_name, ref)

    if do_contain_email and do_contain_password:
        serializer_txt = DJANGO_USER_SERIALIZER
    else:
        serializer_txt = DJANGO_NORMAL_SERIALIZER

    models_fields_to_replace = {
        "FORIEGN_KEY_MODEL_IMPORTS": models_field_imports,
        "MODEL_NAME": model_name,
        "MODEL_FIELDS": models_field_dec_txt,
        "TABLE_NAME": table_name,
        "APP_NAME": "src"
    }

    serializer_fields_to_replace = {
        "MODEL_NAME": model_name,
        "FORIEGN_KEY_MODEL": serializer_field_imports,
        "MODEL_FIELD": json.dumps(all_fields),
        "TABLE_NAME": table_name,
        "FORIEGN_KEY_DECLARATION": serializer_field_declaration
    }

    model_text = replace_variables(model_text, models_fields_to_replace)
    serializer_txt = replace_variables(serializer_txt, serializer_fields_to_replace)

    open(model_file_path, "w").write(model_text)
    open(serializer_file_path, "w").write(serializer_txt)

    replace_item = {
        "MODEL_NAME": model_name,
        "TABLE_NAME": table_name
    }

    serializer_import_line = replace_variables(SERIALZERS_MAIN_IMPORT_LINE, replace_item)
    model_import_line = replace_variables(MODELS_MAIN_IMPORT_LINE, replace_item)

    append_line_to_file(line=model_import_line, file_path=MODELS_CLASS_FILE_PATH)
    append_line_to_file(line=serializer_import_line, file_path=SERIALIZE_CLASS_FILE_PATH)

    if do_contain_email and do_contain_password:
        create_authentication_model(model_name, table_name)

def create_authentication_model(model_name, table_name):
    replace_item = {
        "MODEL_NAME": model_name,
        "TABLE_NAME": table_name
    }
    curr_token_class = replace_variables(DJANGO_TOKEN_CLASS, replace_item)
    curr_token_import = "from src.models.{}token import {}Token".format(table_name, model_name)
    token_file_path = "src/models/{}token.py".format(table_name)
    append_line_to_file(line=curr_token_import, file_path=MODELS_CLASS_FILE_PATH)
    open(token_file_path, "w").write(curr_token_class)
    open("src/lib/authentication.py", "w").write(DJANGO_MODEL_AUTH_CLASS.replace("MODEL_NAME", model_name))

def get_fields_from_serializer_class(serializer_file_path):
    data = open(serializer_file_path, "r").read()
    for line in data.split("\n"):
        if "model_fields = " in line:
            return line
    return ""

def create_request_and_response_json(fields):
    try:
        all_fields = json.loads(fields.split(" = ")[1])
        request_json = {}
        response_json = {}
        request_json_with_id = {}
        for field in all_fields:
            request_json[field] = str(field).upper()

        for field in request_json:
            if field != "password":
                response_json[field] = request_json[field]
                request_json_with_id[field] = request_json[field]


        response_json["_id"] = 1
        request_json_with_id["_id"] = 1
        response_json["_created"] = str(datetime.now())
        response_json["_updated"] = str(datetime.now())
    except Exception as e:
        pass
        return "", "", ""

    return request_json, response_json, request_json_with_id

def create_django_api(api_name, model_name, endpoint, serializer_file_path, controller_file_path, api_file_path, type_api, is_authenticated=False):
    table_name = model_name.lower()

    replace_item = {
        "MODEL_NAME": model_name,
        "TABLE_NAME": table_name
    }

    model_import_line = replace_variables(MODELS_MAIN_IMPORT_LINE, replace_item)
    serializer_import_line = replace_variables(SERIALZERS_MAIN_IMPORT_LINE, replace_item)

    if model_import_line not in open(MODELS_CLASS_FILE_PATH).read():
        raise ValueError("{} not found in model class file. Seems like model for this api is not declared".format(model_import_line))

    if serializer_import_line not in open(SERIALIZE_CLASS_FILE_PATH).read():
        raise ValueError("{} not found in serializer class file. Seems like serializer for this api is not declared".format(model_import_line))

    model_fields_line = ""
    readMe_header = {"Content-type": "application/json"}
    if type_api == "login-api":
        api_view_text = LOGIN_VIEW
        controller_view_text = DJANGO_LOGINAPI_CONTROLLER
        readMe_content = API_DOCUMENTATION_LOGIN_API

    elif type_api == "signup-api":
        api_view_text = SIGNUP_VIEW
        controller_view_text = DJANGO_SIGNUPAPI_CONTROLLER
        model_fields_line = get_fields_from_serializer_class(serializer_file_path)
        readMe_content = API_DOCUMENTATION_SIGNUP_API
    else:

        model_fields_line = get_fields_from_serializer_class(serializer_file_path)
        controller_view_text = DJANGO_NORMAL_API_CONTROLLER
        readMe_content = API_DOCUMENTATION_NORMAL_API

        if is_authenticated == True:
            readMe_header = {"Content-type": "application/json", "token": "Usser_Generated_Token"}
            api_view_text = AUTHENTICATED_VIEW
            readMe_content += MISSING_ACCESS_TOKEN
        else:
            api_view_text = NORMAL_VIEW



    replace_items = {
        "MODEL_NAME": model_name,
        "API_NAME": api_name,
        "MODEL_FIELDS_DECLARATION": model_fields_line
    }

    api_view_text = replace_variables(api_view_text, replace_items)
    controller_view_text = replace_variables(controller_view_text, replace_items)

    apiview_import_line = "from src.views.{}view import {}View".format(
        api_name.lower(), api_name
    )
    controller_import_line = "from src.controllers.{}controller import {}Controller".format(
        api_name.lower(), api_name
    )

    append_line_to_file(apiview_import_line, "src/views/__init__.py")
    append_line_to_file(controller_import_line, "src/controllers/__init__.py")

    open(controller_file_path, "w").write(controller_view_text)
    open(api_file_path, "w").write(api_view_text)

    update_url(endpoint=endpoint, view=api_name + "View")
    request_json, response_json, request_json_with_id = create_request_and_response_json(model_fields_line)
    readme_replace_item = {
        "API_NAME": api_name,
        "ENDPOINT": endpoint,
        "REQUEST_HEADERS": json.dumps(readMe_header),
        "SAMPLE_JSON_RESPONSE": json.dumps(response_json, indent=2),
        "SAMPLE_JSON_REQUEST": json.dumps(request_json, indent=2),
        "SAMPLE_JSON_REQUEST_WITH_ID": json.dumps(request_json_with_id, indent=2)
    }

    readMe_content = replace_variables(readMe_content, readme_replace_item)
    open("README.md", "a").write(readMe_content)









