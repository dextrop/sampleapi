FIELD_VARCHAR = "varchar"
FIELD_DATETIME = "datetime"
FIELD_DATETIME_CREATED = "datetime-c"
FIELD_DATETIME_UPDATED = "datetime-u"
FIELD_FLOAT = "float"
FIELD_INT = "int"
FIELD_BOOL = "bool"
FIELD_EMAIL = "email"
FIELD_PASSWORD = "password"
FIELD_FOREIGN_KEY = "foreign-key"
INDENT_SPACE = "\n    "

def validate_field_config(field_config):
    if "column_name" not in field_config:
        raise ValueError("Missing field name")
    else:
        field_name  = field_config["column_name"]

    if "column_type" not in field_config:
        raise ValueError("Missing field type")
    else:
        field_type = field_config["column_type"]

    ref = ""

    if "ref" in field_config:
        ref = field_config["ref"].replace(" ", "").replace("-", "").replace("_", "")
    elif field_type == FIELD_FOREIGN_KEY:
        raise ValueError("Reference Table Not Found")

    return field_name, field_type, ref


def get_django_field(field_config):
    field_name, field_type, ref = validate_field_config(field_config)
    field_import = ""
    if field_type == FIELD_DATETIME:
        field_dec = " = models.DateTimeField()"
    elif field_type == FIELD_DATETIME_CREATED:
        field_dec = " = models.DateTimeField(auto_now_add=True)"
    elif field_type == FIELD_DATETIME_UPDATED:
        field_dec = " = models.DateTimeField(auto_now=True)"
    elif field_type == FIELD_FLOAT:
        try:
            field_dec = "= models.DecimalField(decimal_places=10, max_digits=20, default=" + str(float(field_config["default_value"]))+")"
        except:
            field_dec = "= models.DecimalField(decimal_places=10, max_digits=20, default=0.0)"
    elif field_type == FIELD_INT:
        try:
            field_dec = ' = models.IntegerField(default=' + str(int(field_config["default_value"])) + ')'
        except:
            field_dec = ' = models.IntegerField(default=0)'
    elif field_type == FIELD_BOOL:
        try:
            field_dec = ' = models.BooleanField(default=' + str(bool(field_config["default_value"])) + ')'
        except:
            field_dec = ' = models.BooleanField(default=False)'
    elif field_type == FIELD_VARCHAR:
        max_len = "200"
        if "max_len" in field_config:
            try:
                max_len = str(int(field_config["max_len"]))
            except:
                pass
        if "default_value" in field_config:
            default_value = field_config["default_value"]
        else:
            default_value = ""
        field_dec = ' = models.CharField(default="' + default_value + '", max_length='+ max_len +')'
    elif field_type == FIELD_EMAIL:
        field_dec = ' = models.CharField(default="", max_length=200)'
    elif field_type == FIELD_PASSWORD:
        field_dec = ' = models.CharField(default="", max_length=200)\n    salt = models.CharField(default="", max_length=16)'
    elif field_type == FIELD_FOREIGN_KEY:
        field_import = "from src.models import {}\n".format(field_config["ref"])
        field_dec = '= models.ForeignKey(' + ref + ', on_delete=models.CASCADE)'
    else:
        raise ValueError("unknown Field Type {} for field {}".format(field_type, field_name))

    if field_type == FIELD_PASSWORD:
        field_name = "password"
    if field_type == FIELD_EMAIL:
        field_name = "email"

    field_txt = INDENT_SPACE + field_name + field_dec
    return field_txt, field_import, field_type, field_name