from askjennie.responses import *
from askjennie.django_helpers.django_components import *

class DjangoHelper():
    def __init__(self, project_location, project_name):
        self.project_name = project_name.replace(" ", "").replace("-", "").replace("_", "")
        if project_location[:-1] != "/":
            project_location = project_location + "/"
        self.project_location = project_location
        self.project_path = project_location + self.project_name + "/"

        self._validator = ValidateDjangoConfigration(project_name=project_name, project_path=project_location)

    def start_project(self):
        """
        The function verifies if project exits. If project does not exits
        create project with application and added libraries.
        :return:
        """

        if self._validator.do_project_exits():
            raise ValueError("Project Already Exits")
        print("Creating Project {} in folder {}".format(self.project_name, self.project_location))
        create_django_project(project_name=self.project_name, project_location=self.project_location)
        return return_success_resp("Project Created Successfully. Kindly prefer reading README.md before starting.x")

    def add_model(self, table_info):
        """
        The function verifies if project exits and if model and serializer
        files does not exits in folder then create model and serializer. This
        is done to avoid overwriting of project files from ask-jennie.
        :param table_info: {
          "columns": [
            {
              "column_name": "name",
              "column_type": "varchar"
            },
            {
              "column_name": "email",
              "column_type": "email"
            },
            {
              "column_name": "password",
              "column_type": "password"
            }
          ],
          "table_name": "Users"
        }
        :return: Success response
        """


        model_name, model_file_path, serializer_file_path = self._validator.validate_model_conf(
            model_configration=table_info
        )
        print("Adding Models {} in Project {}".format(model_name, self.project_name))
        fields = table_info["columns"]
        create_django_model(model_name, model_file_path, serializer_file_path, fields)
        return return_success_resp(
            response_code=200,
            response_message="Model Created Successfully:\n\tPath : src/models/{}.py".format(
                model_name.lower()
            )
        )

    def add_api(self, api_config):
        """
        The function verifies if project exits with proper structure.
        Validates if model and serializer is present in project to be used in
        API generation. Once validation is done it creates APIView and Controller view.

        :param api_config: {
          "endpoint": "v1/signup/",
          "type": "signup-api",
          "model_name": "Users",
          "api_name": "SignupApi"
        }
        :return: Success Response.
        """
        api_name, api_file_path, controller_file_path = self._validator.validate_api_conf(
            api_configration=api_config
        )
        print("Adding API {} in Project {}".format(api_name, self.project_name))
        change_working_dir(self.project_path)

        model_name = api_config["api_table"].replace(" ", "").replace("-", "").replace("_", "")
        table_name = model_name.lower()
        endpoint = api_config["api_endpoint"]
        type_api = api_config["api_type"]
        name = api_config["api_name"]

        serializer_file_path = SERIALIZER_FILE_PATH.replace("TABLE_NAME", model_name.lower())

        is_authenticated = False
        if "is_authenticated" in api_config:
            if api_config["is_authenticated"] == True:
                is_authenticated = True

        create_django_api(
            api_name=name,
            model_name=model_name,
            endpoint=endpoint,
            serializer_file_path=serializer_file_path,
            controller_file_path=controller_file_path,
            api_file_path=api_file_path,
            type_api = type_api,
            is_authenticated=is_authenticated
        )

        return return_success_resp(
            response_code=200,
            response_message="API Created Successfully".format(
                table_name
            )
        )

    def create_backend_project(self, project_settings):
        """
        Vewrified API Configration and then created the project.
        :param backend_configuration:
        :return:
        """
        validated = self._validator.validate_backend_config(backend_configuration=project_settings)
        if validated:
            tables_info = project_settings["tables"]
            apis_config = project_settings["apis"]
            self.start_project()

            for table_info in tables_info:
                self.add_model(table_info)

            for api_config in apis_config:
                self.add_api(api_config)