from askjennie import TypeChecker

def generate_basic_usable_css():
    """
    create and add below components to generated css
    - css_percentage_classes for all _percent_arr variant.
    - css_percentage_classes for all _percent_arr variant.
    - css_pixel_classes for all _percent_arr variant.
    :return: generated css as string.

    jsust storing for future use.
    default_theme_colors = {
        "primary": "#9792E3",
        "danger": "#ED254E",
        "warning": "#F9DC5C",
        "success": "#4A7C59",
        "btn_font_color": "#F4FFFD"
    }
    """

    generated_css = ""

    # Add css_percentage_classes for all _percent_arr variant.
    css_percentage_classes = [
        "margin",
        "margin-left",
        "margin-right",
        "margin-top",
        "margin-bottom",
        "padding",
        "padding-left",
        "padding-right",
        "padding-top",
        "padding-bottom"
    ]
    _percent_arr = [1, 2, 3, 4, 5, 8, 10, 12, 15, 18, 20, 25, 30]
    for pn in css_percentage_classes:
        for p in _percent_arr:
            generated_css += '.' + pn + '-' + str(p) + '-p { ' + pn + ': ' + str(p) + '%!important; }\n'

    # Add css_percentage_classes for all _percent_arr variant.
    _width_percent_arr = [98, 96, 94, 92, 90, 85, 80, 70, 75, 65, 60, 55, 50, 45, 40]
    for p in _width_percent_arr:
        generated_css += '.width-' + str(p) + ' { width : ' + str(p) + '%!important; }\n'
        generated_css += '.width-center-' + str(p) + ' { width :' + str(p) + '%!important;'
        generated_css += 'margin-left :' + str((100 - p) / 2) + '%!important; margin-right :' + str(
            (100 - p) / 2) + '%!important; }\n'

    # Add css_pixel_classes for all _px_arr variant.
    _px_arr = [8, 10, 12, 14, 16, 18, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 100, 150, 200]
    css_px_classes = css_percentage_classes
    css_px_classes.append("font-size")
    for pn in css_px_classes:
        for p in _px_arr:
            ps = str(p)
            generated_css += '.' + pn + '-' + ps + ' { ' + pn + ': ' + ps + 'px!important; }\n'

    #  Add Extra CSS.
    generated_css += '''
.no-margin { margin: 0!important; }
.no-margin-horizontal { margin-left: 0!important; margin-right: 0!important; }
.no-margin-vertical { margin-top: 0!important; margin-bottom: 0!important; }
.box-shadow-default { box-shadow: rgba(0, 0, 0, 0.06) 0px 1px 1px 0px, rgba(0, 0, 0, 0.2) 0px 2px 5px 0px; }
.border-default { border:1px solid rgba(0, 0, 0, 0.06); }
.text-center { text-align: center!important; }
.text-right { text-align: right!important; }
.text-left { text-align: left!important; }
'''
    return generated_css
def redefine_font_size(font_size_variant):
    """
    generate h1,h2 .... font size variant for provided config
    :param font_size_variant: eg: [60, 50, 40] will say h1 -> 60px, h2 -> 50px, h3-> 40px.
    :return: generated css.
    """
    generated_css = ""
    typechecker = TypeChecker()

    if not typechecker.is_dict(font_size_variant):
        raise ValueError("font_size_variant should be array of integer.")
    # generate font size based on provided variant
    for elm in font_size_variant:
        try:
            generated_css += elm + " { font-size: " + str(int(font_size_variant[elm])) + "px; }\n"
        except Exception as e:
            print ("unable to get integer for {}".format(type))
    return generated_css

class CSSGenerator():
    def __init__(self):
        """
        The main task of this module is to generate custom.css file for any project.
        features provided.
        - Generate Theme CSS - Generating basic usable classes for margin, padding, font-size, width,
        width-center, border etc.. also with changing default bootstrap's font-size scheme with provided
         configuration, this include font-size for tags -> h1, h2.. h7.
        - Get rgb value of a color from hex code.

        #init class
        css_gen = CSSGenerator()
        """

    def generate_theme_css(self, output_file=None, font_size_variant=None):
        """
        Generate Theme CSS - Generating basic usable classes for margin, padding, font-size, width,
        width-center, border etc.. also with changing default bootstrap's font-size scheme with provided

        # generate theme_css
        css_gen.generate_theme_css()
        :param output_file:
        :param font_size_variant(optional): dict containing keys as
        :return: generated css
        """
        self.font_size_variant = font_size_variant
        _css = generate_basic_usable_css()
        if self.font_size_variant:
            _css += redefine_font_size(self.font_size_variant)

        if output_file:
            open(output_file, "w").write(_css)
        return _css

    def get_rgb_from_hex(self, colorcode):
        """
        Convert hex color code to rgb.

        # convert hex to rgb
        css_gen.get_rgb_from_hex(hex_color_code)
        :param colorcode: Hex Color Code eg: #F4FFFD
        :return: RGB value of a color code in hex.
        """
        return [int(colorcode.lstrip('#')[i:i + 2], 16) for i in (0, 2, 4)]


