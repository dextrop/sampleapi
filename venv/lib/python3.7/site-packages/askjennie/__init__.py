"""
# Ask Jennie Project

## About the project:
Ask jennie is an AutoBot for developers.

For now we have python package that helps a developer automate repeated work in terms of writing code. The project will be able to create a backend from scratch with just a little bit information around tables and API's The project is under Alpha Version is not for public use.

##### Package `askjennie` will be not be public for a while. It might take 5-8 month for the package to be fully available users under some pricing terms.

## Minimum requirements to install ask-jennie python package.

- Python 3.7+ : Users system must have python 3.7+
- pip : for installing backend code packages

#### What can askjennie do?

- Ask-Jennie can create a backend code from scratch with authentication, models, and all API's within 15 mins when a person has used the software at least 3 times, and for the person using 1st time, it takes around 30-45 mins. It takes around 1-2 days for a user to write the same piece of code in the base case development scenario.
"""
TYPE_DICT = "<class 'dict'>"
TYPE_STRING = "<class 'str'>"
TYPE_INT = "<class 'int'>"
TYPE_FLOAT = "<class 'float'>"
TYPE_ARRAY = "<class 'list'>"

class TypeChecker():
    def is_dict(self, object): return str(type(object)) == TYPE_DICT
    def is_string(self, object): return str(type(object)) == TYPE_STRING
    def is_integer(self, object): return str(type(object)) == TYPE_INT
    def is_float(self, object): return str(type(object)) == TYPE_FLOAT
    def is_array(self, object): return str(type(object)) == TYPE_ARRAY

import sys, json
from askjennie.django_helpers.django_helpers import DjangoHelper
from askjennie.json_helpers.jsonhelpers import JSONHelper
from askjennie.angular_helpers.angularhelpers import AngularHelper
from askjennie.config_generator import create_table_configration
from askjennie.serverhelper import ServerHelper

j_helper = JSONHelper()

def get_project_basic_info(config_file_data):
    if "project_name" not in config_file_data:
        raise ValueError("Missing project name in configration file")
    elif "project_settings" not in config_file_data:
        raise ValueError("Missing project settings in configration file")
    elif "project_location" not in config_file_data:
        raise ValueError("Missing project location in configration file")
    project_name = config_file_data["project_name"]
    project_settings = config_file_data["project_settings"]
    project_location = config_file_data["project_location"]
    return project_name, project_settings, project_location

def ask_jennie_django():
    """
    ask-jennie-django startproject project_configration_file_path
    :return:
    """
    arguments = sys.argv[1:]
    if len(arguments) < 2:
        raise ValueError("Invalid")

    config_file_data = j_helper.read_json(arguments[1])
    if arguments[0] == "startproject":
        project_name, project_settings, project_location = get_project_basic_info(config_file_data)
        django_helper = DjangoHelper(project_name=project_name, project_location=project_location)
        django_helper.create_backend_project(project_settings=project_settings)

def ask_jennie_angular():
    arguments = sys.argv[1:]
    if len(arguments) < 2:
        raise ValueError("Invalid")

    config_file_data = j_helper.read_json(arguments[1])
    if arguments[0] == "startproject":
        project_name, project_settings, project_location = get_project_basic_info(config_file_data)

        django_helper = AngularHelper(project_name=project_name, project_location=project_location)
        django_helper.start_project(project_settings=project_settings)

def config_builder():
    arguments = sys.argv[1:]
    if len(arguments) < 1:
        raise ValueError("Missing Data file to make configration from")

    elif len(arguments) < 2:
        raise ValueError("Missing output file line")
    else:
        create_table_configration(arguments[0], arguments[1])

def server_helper_cmd():
    arguments = sys.argv[1:]
    if len(arguments) < 0:
        raise ValueError("Missing command name, Check Server Helper Documentation for usage.")

    elif len(arguments) < 1:
        raise ValueError("Missing command name, Check Server Helper Documentation for usage.")
    else:
        a = ServerHelper(arguments).run
