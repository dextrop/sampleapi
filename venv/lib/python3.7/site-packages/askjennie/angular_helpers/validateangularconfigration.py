import os
from askjennie import TypeChecker
from askjennie.helpers import validate_dict

class ValidateAngularConfigration():
    def __init__(self, project_name, project_path):
        self.project_name = project_name
        self.project_path = project_path
        self.project_full_path = self.project_path + "/" + self.project_name
        self._type_checker = TypeChecker()

        if self.project_path[-1] == "/":
            self.project_full_path = self.project_path + self.project_name

        if self.project_full_path[:-1] == "/":
            self.project_full_path = self.project_full_path[:-1]

    def do_project_exits(self):
        if os.path.exists(self.project_full_path):
            return True
        return False

    def validate_project_create(self):
        if (self.do_project_exits()):
            raise ValueError("Angular Project Already Exits")

    def validate_project_start(self, project_settings):
        if (self.do_project_exits()):
            raise ValueError("Angular Project Already Exits")
        return self.validate_project_settings(project_settings=project_settings)

    def validate_project_settings(self, project_settings):
        components = []
        base_api_config = "http://localhost:8000"
        apis = []
        is_login_present = False
        component_settings_key = ["component_name", "component_url", "component_type"]
        api_settings_key = ["api_name", "api_endpoint", "api_type"]
        is_authenticated_api_present = False
        if "components" in project_settings:
            print (type(project_settings["components"]))
            print (project_settings["components"])
            if self._type_checker.is_array(project_settings["components"]):
                components = project_settings["components"]
                for component in components:
                    validate_dict(
                        component,
                        component_settings_key,
                        request_name="Component Settings"
                    )
                    if "component_type" in component:
                        if component["component_type"] == "login":
                            is_login_present = True

                    if "is_authenticated" in component:
                        is_authenticated_api_present = True


                if is_authenticated_api_present and not is_login_present:
                    raise ValueError("Authenticated Component is present without login component type.")
            else:
                raise ValueError("key 'components' should be List")

        if "apis" in project_settings:
            if self._type_checker.is_array(project_settings["apis"]):
                apis = project_settings["apis"]
                for api in apis:
                    validate_dict(api,api_settings_key, request_name="API Settings")
            else:
                raise ValueError("key 'apis' should be List")

        if "base_api_config" in project_settings:
            if self._type_checker.is_string(project_settings["base_api_config"]):
                base_api_config = project_settings["base_api_config"]
            else:
                raise ValueError("key 'base_api_config' should be URL String")

        return components, apis, base_api_config, is_login_present
