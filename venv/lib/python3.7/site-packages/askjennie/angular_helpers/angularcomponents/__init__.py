import os
from askjennie.angular_helpers.angularcomponents.matarial_component import *
from askjennie.angular_helpers.angularcomponents.matarial_component import *
from askjennie.angular_helpers.angularcomponents.angular_services import *
from askjennie.angular_helpers.angularcomponents.logincomponent import *
from askjennie.angular_helpers.angularcomponents.boostrap_lib import *
from askjennie.angular_helpers.angularcomponents.index_html import *
from askjennie.angular_helpers.angularcomponents.app_routing_module import *
from askjennie.angular_helpers.angularcomponents.styles_css import *
from askjennie.angular_helpers.angularcomponents.component_base_structure import *
from askjennie.angular_helpers.angularcomponents.pages import *
from askjennie.angular_helpers.angularcomponents.signupcomponent import *

from askjennie import JSONHelper
jsonHelper = JSONHelper()

def create_project(project_path, project_name):
    """
    Start with a new angular application.
    :param project_path: Project Output Directory
    :param project_name: Project Name
    """
    print("Creating Project")

    project_name = project_name.replace(" ", "").replace("-", "").replace("_", "").lower()
    os.chdir(project_path)
    os.system("ng new {} --routing --style css".format(project_name))
    os.chdir(project_name)

    print("Project Created Successfully \n\n\n")

def project_setup(install_angular_material=False):
    """
    Performs Below Action :
        - Add Bootstrap to Project
        - Add Basic Routing to project
        - Add Bootstrap to Project
        - if install_angular_material then adds angular matarial to project
    """
    print("Starting with project setup")

    add_bootstrap()
    add_basic_modules()

    if install_angular_material:
        os.system("ng add @angular/material")

    print("Project Setup Done\n\n\n")


def add_bootstrap():
    open("src/assets/bootstrap.css", "w").write(BOOTSTRAP_MIN_CSS)
    open("src/assets/bootstrap.js", "w").write(BOOSTRAP_MIN_JS)
    open("src/assets/popper.js", "w").write(POPPER_MIN)
    open("src/assets/jquery.js", "w").write(JQUERY_MIN)
    open("src/index.html", "w").write(INDEX_HTML_DATA)

def add_basic_modules():
    print("Adding Basic Modules")
    os.system("ng g s services/accountmanager --skip-tests")
    os.system("ng g s services/apiservice --skip-tests")

    open("src/app/services/auth.guard.ts", "w").write(AUTH_GAURD_TS)
    open("src/app/services/apiservice.service.ts", "w").write(API_SERVICE)
    open("src/app/services/accountmanager.service.ts", "w").write(ACCOUNT_MANAGER_SERVICE)
    open("src/app/app.component.html", "w").write("<router-outlet></router-outlet>")

    find = "import { NgModule } from '@angular/core';"
    replace = find + "\n" + "import {AuthGuard} from './services/auth.guard';"
    data_file = open("src/app/app-routing.module.ts").read().replace(find, replace)

    open("src/app/app-routing.module.ts", "w").write(data_file)

    open("src/styles.css", "w").write(STYLES_CSS)
    print("Basic Module added Successful \n\n\n")

def add_login_component(redirect_to=""):
    print("Adding Login to project")
    os.system("ng g c login --skip-tests")

    open("src/app/login/login.component.html", "w").write(LOGIN_COMPONENT_HTML)
    open("src/app/login/login.component.ts", "w").write(LOGIN_COMPONENT_TS.replace("REDIRECT_TO", redirect_to))
    open("src/app/login/login.component.css", "w").write(LOGIN_COMPONENT_CSS)

    add_routing_for_component("login", "login")
    print("Adding Login to Successful \n\n\n")

def add_signup_component(redirect_to=""):
    print("Adding Login to project")
    os.system("ng g c signup --skip-tests")

    open("src/app/signup/signup.component.html", "w").write(SIGNUP_COMPONENT_HTML)
    open("src/app/signup/signup.component.ts", "w").write(SIGNUP_COMPONENT_TS.replace("REDIRECT_TO", redirect_to))
    open("src/app/signup/signup.component.css", "w").write(SIGNUP_COMPONENT_CSS)

    add_routing_for_component("signup", "signup")
    print("Adding Login to Successful \n\n\n")

def add_normal_component(config):
    print("Adding " + config["component_name"] + " to project")
    component_name = config["component_name"].replace(" ", "").replace("-", "").replace("_", "").lower()
    os.system("ng g c {} --skip-tests".format(component_name))
    is_authenticated = False
    if "is_authenticated" in config:
        is_authenticated = True
    add_routing_for_component(component_name, config["component_url"], is_authenticated)
    if config["component_type"] == "dashboard":
        open("src/app/" + component_name + "/" + component_name + ".component.html", "w").write(DASHBOARD_PAGE.replace("PAGE_NAME", config["component_name"]))
        open("src/app/" + component_name + "/" + component_name + ".component.css", "w").write(DASHBOARD_CSS)
        ts_filename = "src/app/" + component_name + "/" + component_name + ".component.ts"
        data = replace_for_dashboard(ts_filename)
        open(ts_filename, "w").write(data)
    elif config["component_type"] == "landing_page":
        open("src/app/" + component_name + "/" + component_name + ".component.html", "w").write(LANDING_COMPONENT_HTML)
        open("src/app/" + component_name + "/" + component_name + ".component.css", "w").write(LANDING_COMPONENT_CSS)
    else:
        open("src/app/" + component_name + "/" + component_name + ".component.html", "w").write(NORMAL_PAGE)
    print("Adding " + config["component_name"] + " to Successful \n\n\n")

def add_routing_for_component(component_name, url, is_authenticated=False):
    component_class_name = component_name.title() + "Component"
    component_import_line = "import { " + component_class_name + " } from './" + component_name + "/" + component_name + ".component';\n"
    if is_authenticated:
        component_declaration_line = "  { path: '"+url+"', component: "+component_class_name+", canActivate: [AuthGuard]},"
    else:
        component_declaration_line = "  { path: '"+url+"', component: "+component_class_name+"},"

    file_data = open("src/app/app-routing.module.ts", "r").read()
    if component_import_line not in file_data:
        file_data = file_data.replace("const routes: Routes = [" , component_import_line + "const routes: Routes = [")
        file_data = file_data.replace("];" , component_declaration_line + "];")
    elif component_declaration_line not in file_data:
        file_data = file_data.replace("];", component_declaration_line + "];")
    else:
        print ("Route Already Present")

    open("src/app/app-routing.module.ts", "w").write(file_data)

def update_basic_app_modules():
    print ("Update FormsModule, HttpClientModule in app configurations")
    data = open("src/app/app.module.ts").read()
    replaced_data = data.replace("    BrowserAnimationsModule", "    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,")
    replaced_data = replaced_data.replace('''import { NgModule } from '@angular/core';''', '''import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';''')
    open("src/app/app.module.ts", "w").write(replaced_data)

def write_app_component_files(components):
    data = "<router-outlet></router-outlet><footer>FOOTER_CONTENT</footer>"
    footer_content = ""
    for component in components:
        footer_content += '\n\t<a href="'+component["component_url"]+'">' + component["component_name"] + "</a>"
    data = data.replace("FOOTER_CONTENT", footer_content)
    open("src/app/app.component.html", "w").write(data)
