Metadata-Version: 2.1
Name: ask-jennie
Version: 0.0.1
Summary: Ask Jennie is a developer autobot.
Home-page: https://github.com/dextrop/ask-jennie
Author: Saurabh Pandey
Author-email: scoder91@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: pyperclip

# Ask Jennie Project
Ask jennie is an AutoBot for developers.

#### About the project:
For now we have python package that helps a developer automate repeated work in terms of writing code. The project will be able to create a backend from scratch with just a little bit information around tables and API's The project is under Alpha Version is not for public use.

##### Package `askjennie` will be not be public for a while. It might take 5-8 month for the package to be fully available users under some pricing terms.

#### Minimum requirements to install ask-jennie python package.

- Python 3.7+ : Users system must have python 3.7+
- pip : for installing backend code packages
- Pycharm : Its preferable to have pycharm for python developement. Well its a user choice.

### Modules Avalible

### [Django Helper](#django-helpers)   
### [Angular Helper](#angularhelper) 


# Django Helpers

The module helps user in creating a basic backend api structure over django with python 3.5+

<hr />

## Create Backend API
The Module will be able to create a complete backend with provided json information.

```bash
$ djangohelper startproject project-settings.json
```

#### Task Performed :
- Create Django Model
- Add application to django model ( creates folder structure and configure settings.py )
- Add Extra Library for
    1. Logging : handling api logs
    2. Exception Handler : handling api exceptions
    3. Permissions : handling api authentication
    4. Custom Response : providing standard response format in JSON.
- For each configration inside `tables` key
    1. Create a table with all specified columns
    2. if table columns configuration has field_type `email` and `password`. Create Token table as well.
    3. Creates UserType Serializer if fields configuration has field_type `email` and `password` else create Normal Serializer.
`serializers are used to get json value from django models ( tables )`
- For each configration inside `apis` key    
    - Creates APIView for configuration provided.
    - Creates Controller for configuration provided as our APIView wont access models directly.
    - Add endpoint to urls.py.


> project-settings.json explained

```json
{
  "project_location": "PROJECT_PATH",
  "project_name": "PROJECT_NAME",
  "project_settings": {
    "tables": [
      {
          "table_name": "Users",
          "columns": [
              {"column_name": "email", "column_type": "email"},
              {"column_name": "password", "column_type": "password"},
              {"column_name": "name", "column_type": "varchar"},
              {"column_name": "type", "column_type": "int"}
          ]
      }
    ],
    "apis": [
      {
          "api_endpoint": "v1/login/",
          "api_type": "login-api",
          "api_table": "Users",
          "api_name": "ClientLogin"
      },
      {
          "api_endpoint": "v1/signup/",
          "api_type": "signup-api",
          "api_table": "Users",
          "api_name": "ClientSignup"
      }
    ]
  }
}
```

##### Keys Explained.

- key `tables` : Would contain a list of all tables that will be generated for project.
    - key `table_name` : Name Of Table
    - key `columns` : List of configurations for all columns.
          key `columns_name` : Name of column,
          key `columns_type` : Type of column, Refer to Available Column Types.",
          optional_key `max_len`: Option column describing maximum length of column. Default maximum length of varchar field is 200.
          optional_key `default_value` : Option Field can be used with column type 'varchar/int/float'.      

- key `apis`: Would contain a list of all api that will be generated for project. Every api is attached to some table. make sure table is already present in list.
    - key `api_name` : Name of API
    - key `api_type` : Type of API, Refer to Avalible API Types.
    - key `api_endpoint` : Endpoint of api eg v1/myapiname.
    - key `api_table` : Name of table to which this api is going to be connected.
    - optional_key `is_authenticated` : Boolean Field stating if an api is protected by user session. The field cannot be used with api type 'login-api/signup-api'.

##### Available Field Types

Field Type | Description | required_params | optional_params
-----------|-----------|-----------|-----------|
`float` |  For storing float numbers | `Null` | - `default_value` for providing default value to field.
`int` |  For storing integer numbers | `Null` | - `default_value` for providing default value to field.
`varchar:` |  For storing string literals | `Null` |- `default_value` for providing default value to field.
|   |  | `Null` | - `max_len` for providing maximum length to field. if maximum length is not provided it becomes 200
`email` | Email field type | `Null` | max length is 200, unique = True
`password` | Password field type | `Null` | max length is 30, salt field is created with password field. 
`datetime` | Field to store date time. | `Null` | `Null` 
`datetime_created` |  Field to store date time with default is row creation time | `Null` | `Null` 
`datetime_updated` | Field to store date time with default is row updation time | `Null` | `Null` 
`foreign_key:` | For storing reference to other table | `ref` key should contain name of table field will refer to | NONE

##### If email and password field type is passed in table configuration the table is treated as UserTable.

## Create a project

Basic usage of the module is to create a django project with application and some extra helping libraries.

```bash
$ djangohelper startproject
```

#### Task Performed :

- Create Django Model
- Add application to django model ( creates folder structure and configure settings.py )
- Add Extra Library for
    1. Logging : handling api logs
    2. Exception Handler : handling api exceptions
    3. Permissions : handling api authentication
    4. Custom Response : providing standard response format in JSON.

<hr />

## Add Table

Basic usage of the module is add model to project. a model refer to a table in database.

```bash
$ cd path/to/project
$ djangohelper addtable table-settings.json
```


#### Task Performed :
- Creates a model
- if model fields configuration has field_type `email` and `password`. Create Token model.
- Creates UserType Serializer if fields configuration has field_type `email` and `password` else create Normal Serializer.

<hr />

## Create API

Basic usage of the module is add API to any project. The API includes both ( APIView + Controller Class ).

```bash
$ cd path/to/project
$ djangohelper addapi table-settings.json
```

#### Task Performed :
- Creates APIView for configuration provided.
- Creates Controller for configuration provided as our APIView wont access models directly.
- Add endpoint to urls.py.

<hr />

# AngularHelper

## Start A Project From Scratch

Creating a complete Angular Project with components and login scheme added.

```bash
$ cd path/to/project
$ angularhelper startproject project-settings.json
```

#### Task Performed :

- Create an angular project
- Install and configure Bootstrap, Jquery library.
- Add Routing, AuthGaurd, API Services,  
- Create Component Pages with default theme.
- Add Components to Routing.
- Add Login Page if Specified.
- Add Dashboard Page if Specified.

> project-settings.json explained

```json
{
    "components": [
        {
            "component_name": "Home",
            "component_url": "",
            "component_type": "landing_page",
        },
        {
            "component_name": "Login",
            "component_url": "login",
            "component_type": "login",
            "redirect_to": "introduction"
        },
        {
            "component_name": "Introduction",
            "component_url": "introduction",
            "component_type": "dashboard",
            "is_authenticated": true
        },
        {
            "component_name": "Ask Jennie",
            "component_url": "ask-jennie",
            "component_type": "dashboard",
            "is_authenticated": true
        },
        {
            "component_name": "Request Distribution",
            "component_url": "request-distribution",
            "component_type": "dashboard",
            "is_authenticated": true
        }
    ],
    "apis": []
}
```

##### Project Settings Explained.

- key `components` : Would contain a list of all tables that will be generated for project.
    - key `component_name` : Name of Component.
    - key `component_url` : Rendering URL
    - key `component_type` : Type of component
    - key `is_authenticated` : Boolean Field stating if a component is protected by Login.     

- key `apis`: Would contain a list of all api that will be intergrated inside the project.
    - key `api_name` : Name of API
    - key `api_type` : Type of API, Refer to Avalible API Types.
    - key `api_endpoint` : Endpoint of api eg v1/myapiname.
    - key `api_fields` : Name of table to which this api is going to be connected. 
    - key `is_authenticated` : Boolean field stating weather current api will have authentication token or not 


## Add Component inside project

```bash
$ cd path/to/project
$ angularhelper addcomponent component-settings.json
```

## Add API inside project

```bash
$ cd path/to/project
$ angularhelper addapi api-settings.json
```

# Server Helper

## Install Linux, Nginx, MySQL, PHP (LEMP stack)

```bash
$ serverhelper setup lemp
```

## Install PHPMYADMIN

```bash
$ serverhelper install phpmyadmin --port=PORT
```

## Install Elasticsearch

```bash
$ serverhelper install elasticsearch
```

## Install kibana

```bash
$ serverhelper install kibana
```

## Install ELK

```bash
$ serverhelper install elk
```

## Setup ELK to Django

```bash
$ cd path/to/project
$ cd path/to/settings.py
$ serverhelper setup elk
```

## Setup Git SSH Agent

```bash
$ serverhelper setup ssh-git saurabh@trillbit.com
```


## Secure Nginx with Let's Encrypt: Certbot SSL Creation 

Install and Generate Certificate

```
$ serverhelper generate-ssl DOMAIN_NAME
```


## Deploy Django Backend Project

```bash
$ cd path/to/project
$ serverhelper deploy django PROJECT_NAME --port=PORT

```


## Deploy Angular Project

```bash
# serverhelper deploy angular PROJECT_NAME --root=PROJECT_ROOT --port=PORT
```

## Generate NGINX Configration  

Normal HTML and PHP pointing to folder.

```bash
$ cd path/to/folder/to/server
# serverhelper generate nginx-html PROJECT_NAME --port=PORT
```



